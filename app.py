#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Sun Jun 16 23:28:42 2024
#

import wx
from pdo import PDO
import configparser
import urllib.request
from urllib.parse import urlsplit
import os
import csv
import platform
import mysql.connector
from datetime import datetime

from mysql.connector import errorcode

db = False

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainDataFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainDataFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.SetBackgroundColour(wx.Colour(50, 153, 204))

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_menubar.Append(wxglade_tmp_menu, u"Coleção")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.grid_1 = wx.grid.Grid(self.panel_1, wx.ID_ANY, size=(1, 1))
        self.grid_1.CreateGrid(10, 0)
        sizer_1.Add(self.grid_1, 1, wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

    def setFrames(self,connectionFrame, collectionFrame):
        self.connectionFrame = connectionFrame
        self.collectionFrame = collectionFrame

# end of class MainDataFrame

class ConnectionFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        global db
        self.cparser = configparser.RawConfigParser()   
        configFilePath = r'.config'
        self.cparser.read(configFilePath)

        # begin wxGlade: ConnectionFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Base de dados")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.connectionStatus = wx.StaticText(self, wx.ID_ANY, "Status:")
        sizer_1.Add(self.connectionStatus, 0, 0, 0)

        sizer_1.Add((20, 10), 0, 0, 0)

        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        self.txt_hostInput = wx.StaticText(self, wx.ID_ANY, "Host")
        grid_sizer_1.Add(self.txt_hostInput, 0, 0, 0)

        self.hostInput = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_1.Add(self.hostInput, 0, 0, 0)

        grid_sizer_6 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_6, 1, wx.EXPAND, 0)

        self.txt_moduleInput = wx.StaticText(self, wx.ID_ANY, "Modulo")
        grid_sizer_6.Add(self.txt_moduleInput, 0, 0, 0)

        self.moduleInput = wx.TextCtrl(self, wx.ID_ANY, "")
        self.moduleInput.Enable(False)
        grid_sizer_6.Add(self.moduleInput, 0, 0, 0)

        grid_sizer_5 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        self.txt_dbInput = wx.StaticText(self, wx.ID_ANY, "Database")
        grid_sizer_5.Add(self.txt_dbInput, 0, 0, 0)

        self.dbInput = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_5.Add(self.dbInput, 0, 0, 0)

        grid_sizer_3 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        self.txt_userInput = wx.StaticText(self, wx.ID_ANY, u"Usuário")
        grid_sizer_3.Add(self.txt_userInput, 0, 0, 0)

        self.userInput = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_3.Add(self.userInput, 0, 0, 0)

        grid_sizer_4 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)

        self.txt_passwdInput = wx.StaticText(self, wx.ID_ANY, "Senha")
        grid_sizer_4.Add(self.txt_passwdInput, 0, 0, 0)

        self.passwdInput = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        grid_sizer_4.Add(self.passwdInput, 0, 0, 0)

        self.btnConnection = wx.Button(self, wx.ID_ANY, "Connectar")
        sizer_1.Add(self.btnConnection, 0, 0, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.connect, self.btnConnection)
        # end wxGlade

        self.hostInput.SetValue(self.cparser.get('DATABASE','host'))
        self.userInput.SetValue(self.cparser.get('DATABASE','user'))
        self.passwdInput.SetValue(self.cparser.get('DATABASE','passwd'))
        self.moduleInput.SetValue(self.cparser.get('DATABASE','module'))
        self.dbInput.SetValue(self.cparser.get('DATABASE','db'))

    def connect(self, event):  # wxGlade: ConnectionFrame.<event_handler>
        global db
        try:
            thostInput = self.hostInput.GetValue()
            tuserInput = self.userInput.GetValue()
            tpasswdInput = self.passwdInput.GetValue()
            tmoduleInput = self.moduleInput.GetValue()
            tdbInput = self.dbInput.GetValue()

            db = PDO("module="+tmoduleInput+";host="+thostInput+";user="+tuserInput+";passwd="+tpasswdInput+";db="+tdbInput)
                            
            self.cparser.set('DATABASE', 'host', thostInput)
            self.cparser.set('DATABASE', 'user', tuserInput)
            self.cparser.set('DATABASE', 'passwd', tpasswdInput)
            self.cparser.set('DATABASE', 'module', tmoduleInput)
            self.cparser.set('DATABASE', 'db', tdbInput)
            
            with open('.config', 'w') as configfile:
                self.cparser.write(configfile)

            self.collectionFrame.txtInput.SetValue(self.cparser.get('RESOURCES','txt'))
            self.collectionFrame.urlInput.SetValue(self.cparser.get('RESOURCES','csv'))
            self.collectionFrame.collectionNameInput.SetValue(self.cparser.get('RESOURCES','collection'))
            self.collectionFrame.Show()
            self.Destroy()
        except:
            self.setStatus('Conexão mal sucedida.')
        event.Skip()
    
    def setStatus(self,text):
        self.connectionStatus.SetLabel(text)
    
    def setFrames(self, collectionFrame, dataFrame):
        self.collectionFrame = collectionFrame;
        self.dataFrame = dataFrame;
        
        

# end of class ConnectionFrame

class CollectionFrame(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.collectionslist = []
        # begin wxGlade: CollectionFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle(u"Coleção")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.collectionListBox = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        sizer_1.Add(self.collectionListBox, 0, 0, 0)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_7, 1, wx.EXPAND, 0)

        self.collectionName = wx.StaticText(self, wx.ID_ANY, u"Coleção")
        sizer_7.Add(self.collectionName, 0, 0, 0)

        self.collectionNameInput = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_7.Add(self.collectionNameInput, 0, 0, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)

        text_urlInput_copy = wx.StaticText(self, wx.ID_ANY, "Recurso Txt ")
        sizer_6.Add(text_urlInput_copy, 0, 0, 0)

        self.txtInput = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_6.Add(self.txtInput, 0, 0, 0)

        self.btnWgetTxt = wx.Button(self, wx.ID_ANY, "Adicionar")
        sizer_5.Add(self.btnWgetTxt, 0, 0, 0)

        sizer_1.Add((20, 20), 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Importar arquivo")
        sizer_1.Add(label_3, 0, 0, 0)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_3, 1, wx.EXPAND, 0)

        text_urlInput = wx.StaticText(self, wx.ID_ANY, "Recurso Csv")
        sizer_3.Add(text_urlInput, 0, 0, 0)

        self.urlInput = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_3.Add(self.urlInput, 0, 0, 0)

        self.btnWget = wx.Button(self, wx.ID_ANY, "wget")
        sizer_4.Add(self.btnWget, 0, 0, 0)

        self.wgetStatus = wx.StaticText(self, wx.ID_ANY, "")
        sizer_1.Add(self.wgetStatus, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_ANY, "Abrir")
        self.button_OK.SetDefault()
        sizer_2.Add(self.button_OK, 0, 0, 0)

        sizer_1.Add((0, 0), 0, 0, 0)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.wgetTxt, self.btnWgetTxt)
        self.Bind(wx.EVT_BUTTON, self.wgetFile, self.btnWget)
        self.Bind(wx.EVT_BUTTON, self.chooseCollection, self.button_OK)
        self.Bind(wx.EVT_INIT_DIALOG, self.collectionOpen, self)
        # end wxGlade

    def chooseCollection(self, event):  # wxGlade: CollectionFrame.<event_handler>
        print('te')

    def cancelCollection(self, event):  # wxGlade: CollectionFrame.<event_handler>
        print("Event handler 'cancelCollection' not implemented!")

    def setFrames(self,connectionFrame, dataFrame):
        self.connectionFrame = connectionFrame
        self.dataFrame = dataFrame

    def wgetFile(self, event):  # wxGlade: CollectionFrame.<event_handler>
        url = self.urlInput.GetValue()
        try:
            path = urlsplit(url).path
            file_name = os.path.basename(path)
            
            collectionname = self.collectionNameInput.GetValue()
            
            file = file_name.split(".")
            db.execute("SHOW TABLES LIKE '"+collectionname+"';")

            if db.fetchone() == None:
                self.wgetStatus.SetLabel('Primeiro importe o arquivo txt relacionado a esta coleção.')
                return False

            if file[1] != 'csv':
                raise Exception("Extensão do arquivo inválida")
            urllib.request.urlretrieve(url, file_name)
                
            fileDate = creation_date(file_name)
            with open(file_name, 'r') as csv_file:  
                reader = csv.reader(csv_file, delimiter=';')
                header = next(reader)
                header.append('fileDate')
                # lento...
                values = []
                columns = ",".join(header)
                for row in reader:
                    rowvalues = []
                    for value in row:
                        if value:
                            value = value.replace("'", "''")
                            value = value.replace("\"", "")
                            rowvalues.append(value);
                        else:
                            rowvalues.append(None)
                    rowvalues.append(fileDate)
                    values.append(rowvalues)

            self.cparser = configparser.RawConfigParser()   
            configFilePath = r'.config'
            self.cparser.read(configFilePath)

            thostInput = self.cparser.get('DATABASE','host')
            tuserInput = self.cparser.get('DATABASE','user')
            tpasswdInput = self.cparser.get('DATABASE','passwd')
            # tmoduleInput = self.cparser.get('DATABASE','module')
            tdbInput = self.cparser.get('DATABASE','db')

            mydb = mysql.connector.connect(
                host=thostInput,
                user=tuserInput,
                password=tpasswdInput,
                database=tdbInput
            )
            mycursor = mydb.cursor()

            placeholders = ",".join(["%s"] * len(header))
            sql = f"INSERT INTO {collectionname} ({columns}) VALUES ({placeholders})"
            self.wgetStatus.SetLabel('Arquivo csv importado com sucesso')
        except mysql.connector.Error as err:
            self.wgetStatus.SetLabel('Não foi possível importar o arquivo csv.')
        mycursor.executemany(sql, values)
        mydb.commit()
                        
    def wgetTxt(self, event):  # wxGlade: CollectionFrame.<event_handler>
        url = self.txtInput.GetValue()
        try:
            path = urlsplit(url).path
            file_name = os.path.basename(path)
            file = file_name.split(".")
            urllib.request.urlretrieve(url, file_name)
            
            collectionname = self.collectionNameInput.GetValue()
            
            db.execute("SELECT collectionname FROM collections WHERE collectionname = '"+collectionname+"'");
            
            if db.fetchone() == None:
                db.execute("INSERT INTO collections(collectionname) VALUES('"+collectionname+"')");
                with open(file_name, 'r') as ffile:
                    data = ffile.readlines()

                result = {}
                current_field = None
                attributes = []
                columns = '';

                for line in data:
                    line = line.strip()
                    if line.startswith('Campo:'):
                        if current_field is not None:
                            result[current_field] = attributes
                        current_field = line.split(':', 1)[1].strip()
                        attributes = []
                    elif line.startswith('Descrição :'):
                        attributes.append(('Descrição', line.split(':', 1)[1].strip()))
                    elif line.startswith('Domínio   :'):
                        attributes.append(('Domínio', line.split(':', 1)[1].strip()))
                    elif line.startswith('Tipo Dados:'):
                        attributes.append(('Tipo Dados', line.split(':', 1)[1].strip()))
                    elif line.startswith('Precisão  :'):
                        attributes.append(('Precisão', line.split(':', 1)[1].strip()))
                    elif line.startswith('Scale     :'):
                        attributes.append(('Scale', line.split(':', 1)[1].strip()))
                    elif line.startswith('Tamanho   :'):
                        attributes.append(('Tamanho', line.split(':', 1)[1].strip()))

                if current_field is not None:
                    result[current_field] = attributes

                for field, attributes in result.items():
                    if attributes[2][1] == 'varchar':
                        columns+= field+" VARCHAR({})".format(attributes[3][1])+","
                        
                    elif attributes[2][1] == 'char':
                        columns+= field+" CHAR({})".format(attributes[3][1])+","
                        
                    elif attributes[2][1] == 'numeric':
                        columns+= field+" DECIMAL({}, {})".format(attributes[3][1], attributes[4][1])+","
                        
                    elif attributes[2][1] == 'date':
                        columns+= field+" DATE"+","
                columns = columns+'fileDate DATE'

                db.execute("CREATE TABLE "+collectionname+"("+format(columns)+")")
                
                self.collectionOpen()
            self.wgetStatus.SetLabel('Arquivo txt baixado com sucesso.')
        except:
            self.wgetStatus.SetLabel('Não foi possível acessar o arquivo txt.')
            
    def collectionOpen(self, event = None):  # wxGlade: CollectionFrame.<event_handler>
        db.execute('SELECT * FROM collections');
        result = db.fetchall()
        collections = []
        for row in result:
            collections.append(row[0])

        self.collectionListBox.Set(collections)
        if event:
            event.Skip()
# end of class CollectionFrame


class MainApp(wx.App):
    def OnInit(self):
        self.CollectionFrame = CollectionFrame(None, wx.ID_ANY, "")
        self.MainDataFrame = MainDataFrame(None, wx.ID_ANY, "")
        self.ConnectionFrame = ConnectionFrame(None, wx.ID_ANY, "")

        self.CollectionFrame.setFrames(connectionFrame = self.ConnectionFrame, dataFrame = self.MainDataFrame)  
        self.MainDataFrame.setFrames(connectionFrame = self.ConnectionFrame, collectionFrame = self.CollectionFrame)
        self.ConnectionFrame.setFrames(collectionFrame = self.CollectionFrame, dataFrame = self.MainDataFrame)

        self.SetTopWindow(self.ConnectionFrame)
        self.ConnectionFrame.Show()
        return True

# end of class MainApp

def creation_date(path_to_file):
    if platform.system() == 'Windows':
        timestamp = os.path.getctime(path_to_file)
    else:
        stat = os.stat(path_to_file)
        try:
            timestamp = stat.st_birthtime
        except AttributeError:
            timestamp = stat.st_mtime
    creation_date_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d')
    return creation_date_str

if __name__ == "__main__":
    app = MainApp(0)
    app.MainLoop()
